name: CI
on:
  - push
  - pull_request
env:
  GKSwstype: 100
  JULIA_PKG_PRECOMPILE_AUTO: false
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.6'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v1
      - run: |
          # Instantiate Pkg
          wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/scripts/installorg.jl
          julia --project=test installorg.jl
      - run: |
          # Run tests
          julia --project=test --color=auto --startup-file=yes --code-coverage="user" --depwarn="yes" --check-bounds="yes" -e 'include("test/runtests.jl")'
      - run: |
          # Run downstream "Krotov" tests
          julia --project=test -e '
            using Pkg
            Pkg.test("Krotov", coverage=true)'
      - run: |
          # Run downstream "GRAPE" tests
          julia --project=test -e '
            using Pkg
            Pkg.test("GRAPE", coverage=true)'
      - uses: julia-actions/julia-processcoverage@v1
      - run: |
          # Summarize coverage
          julia --project=test -e 'using QuantumControlTestUtils; show_coverage();'
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          # Install Python dependencies
          set -x
          /usr/bin/python3 -m pip install zip-files
      - run: |
          # Instantiate Pkg
          wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/scripts/installorg.jl
          install -m 600 -D /dev/null ~/.ssh/known_hosts
          ssh-keyscan -H github.com > ~/.ssh/known_hosts
          julia --project=test -e 'include("installorg.jl"); installorg(; github="develop")'
          # installing in develop mode enables proper "source" links in subpackage APIs
      - run: cp test/*.toml docs/  # Prepare DrWatson
      - run: |
          # Run doctests
          julia --project=test -e '
            using Documenter: DocMeta, doctest
            using QuantumControl
            DocMeta.setdocmeta!(QuantumControl, :DocTestSetup, :(using QuantumControl); recursive=true)
            doctest(QuantumControl)'
      - run: |
          # Make documentation
          julia --project=test docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
          JULIA_DEBUG: Documenter
      - name: Zip the HTML documentation
        run: zip-folder --debug --auto-root --outfile "docs.zip" docs/build
      - uses: actions/upload-artifact@v2
        name: Upload documentation artifacts
        with:
          name: QuantumControl
          # We need at least two files in the artifact to avoid a weird
          # double-zip file. Hence README.md
          path: |
            README.md
            ./docs.zip
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - name: Get codestyle settings
        run: wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/.JuliaFormatter.toml
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(".", verbose=true)'
      - name: Format check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'
